// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClinentStreamingDemoServiceClient is the client API for ClinentStreamingDemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClinentStreamingDemoServiceClient interface {
	UploadTexture(ctx context.Context, opts ...grpc.CallOption) (ClinentStreamingDemoService_UploadTextureClient, error)
}

type clinentStreamingDemoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClinentStreamingDemoServiceClient(cc grpc.ClientConnInterface) ClinentStreamingDemoServiceClient {
	return &clinentStreamingDemoServiceClient{cc}
}

func (c *clinentStreamingDemoServiceClient) UploadTexture(ctx context.Context, opts ...grpc.CallOption) (ClinentStreamingDemoService_UploadTextureClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClinentStreamingDemoService_ServiceDesc.Streams[0], "/grpcDemo.ClinentStreamingDemoService/UploadTexture", opts...)
	if err != nil {
		return nil, err
	}
	x := &clinentStreamingDemoServiceUploadTextureClient{stream}
	return x, nil
}

type ClinentStreamingDemoService_UploadTextureClient interface {
	Send(*UploadClientTextureRequest) error
	CloseAndRecv() (*UploadClientTextureResponse, error)
	grpc.ClientStream
}

type clinentStreamingDemoServiceUploadTextureClient struct {
	grpc.ClientStream
}

func (x *clinentStreamingDemoServiceUploadTextureClient) Send(m *UploadClientTextureRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clinentStreamingDemoServiceUploadTextureClient) CloseAndRecv() (*UploadClientTextureResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadClientTextureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClinentStreamingDemoServiceServer is the server API for ClinentStreamingDemoService service.
// All implementations must embed UnimplementedClinentStreamingDemoServiceServer
// for forward compatibility
type ClinentStreamingDemoServiceServer interface {
	UploadTexture(ClinentStreamingDemoService_UploadTextureServer) error
	mustEmbedUnimplementedClinentStreamingDemoServiceServer()
}

// UnimplementedClinentStreamingDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClinentStreamingDemoServiceServer struct {
}

func (UnimplementedClinentStreamingDemoServiceServer) UploadTexture(ClinentStreamingDemoService_UploadTextureServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadTexture not implemented")
}
func (UnimplementedClinentStreamingDemoServiceServer) mustEmbedUnimplementedClinentStreamingDemoServiceServer() {
}

// UnsafeClinentStreamingDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClinentStreamingDemoServiceServer will
// result in compilation errors.
type UnsafeClinentStreamingDemoServiceServer interface {
	mustEmbedUnimplementedClinentStreamingDemoServiceServer()
}

func RegisterClinentStreamingDemoServiceServer(s grpc.ServiceRegistrar, srv ClinentStreamingDemoServiceServer) {
	s.RegisterService(&ClinentStreamingDemoService_ServiceDesc, srv)
}

func _ClinentStreamingDemoService_UploadTexture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClinentStreamingDemoServiceServer).UploadTexture(&clinentStreamingDemoServiceUploadTextureServer{stream})
}

type ClinentStreamingDemoService_UploadTextureServer interface {
	SendAndClose(*UploadClientTextureResponse) error
	Recv() (*UploadClientTextureRequest, error)
	grpc.ServerStream
}

type clinentStreamingDemoServiceUploadTextureServer struct {
	grpc.ServerStream
}

func (x *clinentStreamingDemoServiceUploadTextureServer) SendAndClose(m *UploadClientTextureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clinentStreamingDemoServiceUploadTextureServer) Recv() (*UploadClientTextureRequest, error) {
	m := new(UploadClientTextureRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClinentStreamingDemoService_ServiceDesc is the grpc.ServiceDesc for ClinentStreamingDemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClinentStreamingDemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcDemo.ClinentStreamingDemoService",
	HandlerType: (*ClinentStreamingDemoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadTexture",
			Handler:       _ClinentStreamingDemoService_UploadTexture_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clientStreamingDemo.proto",
}
