// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamingDemoServiceClient is the client API for ServerStreamingDemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamingDemoServiceClient interface {
	GetTexture(ctx context.Context, in *GetServerStreamingTextureRequest, opts ...grpc.CallOption) (ServerStreamingDemoService_GetTextureClient, error)
}

type serverStreamingDemoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamingDemoServiceClient(cc grpc.ClientConnInterface) ServerStreamingDemoServiceClient {
	return &serverStreamingDemoServiceClient{cc}
}

func (c *serverStreamingDemoServiceClient) GetTexture(ctx context.Context, in *GetServerStreamingTextureRequest, opts ...grpc.CallOption) (ServerStreamingDemoService_GetTextureClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStreamingDemoService_ServiceDesc.Streams[0], "/grpcDemo.ServerStreamingDemoService/GetTexture", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamingDemoServiceGetTextureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreamingDemoService_GetTextureClient interface {
	Recv() (*GetServerStreamingTextureResponse, error)
	grpc.ClientStream
}

type serverStreamingDemoServiceGetTextureClient struct {
	grpc.ClientStream
}

func (x *serverStreamingDemoServiceGetTextureClient) Recv() (*GetServerStreamingTextureResponse, error) {
	m := new(GetServerStreamingTextureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamingDemoServiceServer is the server API for ServerStreamingDemoService service.
// All implementations must embed UnimplementedServerStreamingDemoServiceServer
// for forward compatibility
type ServerStreamingDemoServiceServer interface {
	GetTexture(*GetServerStreamingTextureRequest, ServerStreamingDemoService_GetTextureServer) error
	mustEmbedUnimplementedServerStreamingDemoServiceServer()
}

// UnimplementedServerStreamingDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamingDemoServiceServer struct {
}

func (UnimplementedServerStreamingDemoServiceServer) GetTexture(*GetServerStreamingTextureRequest, ServerStreamingDemoService_GetTextureServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTexture not implemented")
}
func (UnimplementedServerStreamingDemoServiceServer) mustEmbedUnimplementedServerStreamingDemoServiceServer() {
}

// UnsafeServerStreamingDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamingDemoServiceServer will
// result in compilation errors.
type UnsafeServerStreamingDemoServiceServer interface {
	mustEmbedUnimplementedServerStreamingDemoServiceServer()
}

func RegisterServerStreamingDemoServiceServer(s grpc.ServiceRegistrar, srv ServerStreamingDemoServiceServer) {
	s.RegisterService(&ServerStreamingDemoService_ServiceDesc, srv)
}

func _ServerStreamingDemoService_GetTexture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServerStreamingTextureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamingDemoServiceServer).GetTexture(m, &serverStreamingDemoServiceGetTextureServer{stream})
}

type ServerStreamingDemoService_GetTextureServer interface {
	Send(*GetServerStreamingTextureResponse) error
	grpc.ServerStream
}

type serverStreamingDemoServiceGetTextureServer struct {
	grpc.ServerStream
}

func (x *serverStreamingDemoServiceGetTextureServer) Send(m *GetServerStreamingTextureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStreamingDemoService_ServiceDesc is the grpc.ServiceDesc for ServerStreamingDemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStreamingDemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcDemo.ServerStreamingDemoService",
	HandlerType: (*ServerStreamingDemoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTexture",
			Handler:       _ServerStreamingDemoService_GetTexture_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serverStreamingDemo.proto",
}
