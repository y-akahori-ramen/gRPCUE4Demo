THIRD_PARTY_INCLUDES_START
#pragma warning (disable : 4005)
#pragma warning (disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverStreamingDemo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serverStreamingDemo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serverStreamingDemo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serverStreamingDemo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serverStreamingDemo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serverStreamingDemo_2eproto;
namespace grpcDemo {
class GetServerStreamingMessageRequest;
struct GetServerStreamingMessageRequestDefaultTypeInternal;
extern GetServerStreamingMessageRequestDefaultTypeInternal _GetServerStreamingMessageRequest_default_instance_;
class GetServerStreamingMessageResponse;
struct GetServerStreamingMessageResponseDefaultTypeInternal;
extern GetServerStreamingMessageResponseDefaultTypeInternal _GetServerStreamingMessageResponse_default_instance_;
class GetServerStreamingTextureRequest;
struct GetServerStreamingTextureRequestDefaultTypeInternal;
extern GetServerStreamingTextureRequestDefaultTypeInternal _GetServerStreamingTextureRequest_default_instance_;
class GetServerStreamingTextureResponse;
struct GetServerStreamingTextureResponseDefaultTypeInternal;
extern GetServerStreamingTextureResponseDefaultTypeInternal _GetServerStreamingTextureResponse_default_instance_;
}  // namespace grpcDemo
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcDemo::GetServerStreamingMessageRequest* Arena::CreateMaybeMessage<::grpcDemo::GetServerStreamingMessageRequest>(Arena*);
template<> ::grpcDemo::GetServerStreamingMessageResponse* Arena::CreateMaybeMessage<::grpcDemo::GetServerStreamingMessageResponse>(Arena*);
template<> ::grpcDemo::GetServerStreamingTextureRequest* Arena::CreateMaybeMessage<::grpcDemo::GetServerStreamingTextureRequest>(Arena*);
template<> ::grpcDemo::GetServerStreamingTextureResponse* Arena::CreateMaybeMessage<::grpcDemo::GetServerStreamingTextureResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcDemo {

// ===================================================================

class GetServerStreamingTextureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcDemo.GetServerStreamingTextureRequest) */ {
 public:
  inline GetServerStreamingTextureRequest() : GetServerStreamingTextureRequest(nullptr) {}
  ~GetServerStreamingTextureRequest() override;
  explicit constexpr GetServerStreamingTextureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerStreamingTextureRequest(const GetServerStreamingTextureRequest& from);
  GetServerStreamingTextureRequest(GetServerStreamingTextureRequest&& from) noexcept
    : GetServerStreamingTextureRequest() {
    *this = ::std::move(from);
  }

  inline GetServerStreamingTextureRequest& operator=(const GetServerStreamingTextureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerStreamingTextureRequest& operator=(GetServerStreamingTextureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerStreamingTextureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerStreamingTextureRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerStreamingTextureRequest*>(
               &_GetServerStreamingTextureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetServerStreamingTextureRequest& a, GetServerStreamingTextureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerStreamingTextureRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerStreamingTextureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerStreamingTextureRequest* New() const final {
    return new GetServerStreamingTextureRequest();
  }

  GetServerStreamingTextureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerStreamingTextureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerStreamingTextureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerStreamingTextureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerStreamingTextureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcDemo.GetServerStreamingTextureRequest";
  }
  protected:
  explicit GetServerStreamingTextureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageNameFieldNumber = 1,
  };
  // string imageName = 1;
  void clear_imagename();
  const std::string& imagename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagename();
  PROTOBUF_MUST_USE_RESULT std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // @@protoc_insertion_point(class_scope:grpcDemo.GetServerStreamingTextureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serverStreamingDemo_2eproto;
};
// -------------------------------------------------------------------

class GetServerStreamingTextureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcDemo.GetServerStreamingTextureResponse) */ {
 public:
  inline GetServerStreamingTextureResponse() : GetServerStreamingTextureResponse(nullptr) {}
  ~GetServerStreamingTextureResponse() override;
  explicit constexpr GetServerStreamingTextureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerStreamingTextureResponse(const GetServerStreamingTextureResponse& from);
  GetServerStreamingTextureResponse(GetServerStreamingTextureResponse&& from) noexcept
    : GetServerStreamingTextureResponse() {
    *this = ::std::move(from);
  }

  inline GetServerStreamingTextureResponse& operator=(const GetServerStreamingTextureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerStreamingTextureResponse& operator=(GetServerStreamingTextureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerStreamingTextureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerStreamingTextureResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerStreamingTextureResponse*>(
               &_GetServerStreamingTextureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetServerStreamingTextureResponse& a, GetServerStreamingTextureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerStreamingTextureResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerStreamingTextureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerStreamingTextureResponse* New() const final {
    return new GetServerStreamingTextureResponse();
  }

  GetServerStreamingTextureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerStreamingTextureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerStreamingTextureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerStreamingTextureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerStreamingTextureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcDemo.GetServerStreamingTextureResponse";
  }
  protected:
  explicit GetServerStreamingTextureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 1,
  };
  // bytes chunk = 1;
  void clear_chunk();
  const std::string& chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk();
  PROTOBUF_MUST_USE_RESULT std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  // @@protoc_insertion_point(class_scope:grpcDemo.GetServerStreamingTextureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serverStreamingDemo_2eproto;
};
// -------------------------------------------------------------------

class GetServerStreamingMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcDemo.GetServerStreamingMessageRequest) */ {
 public:
  inline GetServerStreamingMessageRequest() : GetServerStreamingMessageRequest(nullptr) {}
  ~GetServerStreamingMessageRequest() override;
  explicit constexpr GetServerStreamingMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerStreamingMessageRequest(const GetServerStreamingMessageRequest& from);
  GetServerStreamingMessageRequest(GetServerStreamingMessageRequest&& from) noexcept
    : GetServerStreamingMessageRequest() {
    *this = ::std::move(from);
  }

  inline GetServerStreamingMessageRequest& operator=(const GetServerStreamingMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerStreamingMessageRequest& operator=(GetServerStreamingMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerStreamingMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerStreamingMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerStreamingMessageRequest*>(
               &_GetServerStreamingMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServerStreamingMessageRequest& a, GetServerStreamingMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerStreamingMessageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerStreamingMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerStreamingMessageRequest* New() const final {
    return new GetServerStreamingMessageRequest();
  }

  GetServerStreamingMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerStreamingMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerStreamingMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerStreamingMessageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerStreamingMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcDemo.GetServerStreamingMessageRequest";
  }
  protected:
  explicit GetServerStreamingMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcDemo.GetServerStreamingMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serverStreamingDemo_2eproto;
};
// -------------------------------------------------------------------

class GetServerStreamingMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcDemo.GetServerStreamingMessageResponse) */ {
 public:
  inline GetServerStreamingMessageResponse() : GetServerStreamingMessageResponse(nullptr) {}
  ~GetServerStreamingMessageResponse() override;
  explicit constexpr GetServerStreamingMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerStreamingMessageResponse(const GetServerStreamingMessageResponse& from);
  GetServerStreamingMessageResponse(GetServerStreamingMessageResponse&& from) noexcept
    : GetServerStreamingMessageResponse() {
    *this = ::std::move(from);
  }

  inline GetServerStreamingMessageResponse& operator=(const GetServerStreamingMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerStreamingMessageResponse& operator=(GetServerStreamingMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerStreamingMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerStreamingMessageResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerStreamingMessageResponse*>(
               &_GetServerStreamingMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServerStreamingMessageResponse& a, GetServerStreamingMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerStreamingMessageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerStreamingMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerStreamingMessageResponse* New() const final {
    return new GetServerStreamingMessageResponse();
  }

  GetServerStreamingMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerStreamingMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerStreamingMessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerStreamingMessageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerStreamingMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcDemo.GetServerStreamingMessageResponse";
  }
  protected:
  explicit GetServerStreamingMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:grpcDemo.GetServerStreamingMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serverStreamingDemo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetServerStreamingTextureRequest

// string imageName = 1;
inline void GetServerStreamingTextureRequest::clear_imagename() {
  imagename_.ClearToEmpty();
}
inline const std::string& GetServerStreamingTextureRequest::imagename() const {
  // @@protoc_insertion_point(field_get:grpcDemo.GetServerStreamingTextureRequest.imageName)
  return _internal_imagename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServerStreamingTextureRequest::set_imagename(ArgT0&& arg0, ArgT... args) {
 
 imagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcDemo.GetServerStreamingTextureRequest.imageName)
}
inline std::string* GetServerStreamingTextureRequest::mutable_imagename() {
  std::string* _s = _internal_mutable_imagename();
  // @@protoc_insertion_point(field_mutable:grpcDemo.GetServerStreamingTextureRequest.imageName)
  return _s;
}
inline const std::string& GetServerStreamingTextureRequest::_internal_imagename() const {
  return imagename_.Get();
}
inline void GetServerStreamingTextureRequest::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetServerStreamingTextureRequest::_internal_mutable_imagename() {
  
  return imagename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetServerStreamingTextureRequest::release_imagename() {
  // @@protoc_insertion_point(field_release:grpcDemo.GetServerStreamingTextureRequest.imageName)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetServerStreamingTextureRequest::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcDemo.GetServerStreamingTextureRequest.imageName)
}

// -------------------------------------------------------------------

// GetServerStreamingTextureResponse

// bytes chunk = 1;
inline void GetServerStreamingTextureResponse::clear_chunk() {
  chunk_.ClearToEmpty();
}
inline const std::string& GetServerStreamingTextureResponse::chunk() const {
  // @@protoc_insertion_point(field_get:grpcDemo.GetServerStreamingTextureResponse.chunk)
  return _internal_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServerStreamingTextureResponse::set_chunk(ArgT0&& arg0, ArgT... args) {
 
 chunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcDemo.GetServerStreamingTextureResponse.chunk)
}
inline std::string* GetServerStreamingTextureResponse::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:grpcDemo.GetServerStreamingTextureResponse.chunk)
  return _s;
}
inline const std::string& GetServerStreamingTextureResponse::_internal_chunk() const {
  return chunk_.Get();
}
inline void GetServerStreamingTextureResponse::_internal_set_chunk(const std::string& value) {
  
  chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetServerStreamingTextureResponse::_internal_mutable_chunk() {
  
  return chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetServerStreamingTextureResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:grpcDemo.GetServerStreamingTextureResponse.chunk)
  return chunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetServerStreamingTextureResponse::set_allocated_chunk(std::string* chunk) {
  if (chunk != nullptr) {
    
  } else {
    
  }
  chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcDemo.GetServerStreamingTextureResponse.chunk)
}

// -------------------------------------------------------------------

// GetServerStreamingMessageRequest

// int32 count = 1;
inline void GetServerStreamingMessageRequest::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerStreamingMessageRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerStreamingMessageRequest::count() const {
  // @@protoc_insertion_point(field_get:grpcDemo.GetServerStreamingMessageRequest.count)
  return _internal_count();
}
inline void GetServerStreamingMessageRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetServerStreamingMessageRequest::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:grpcDemo.GetServerStreamingMessageRequest.count)
}

// -------------------------------------------------------------------

// GetServerStreamingMessageResponse

// string message = 1;
inline void GetServerStreamingMessageResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetServerStreamingMessageResponse::message() const {
  // @@protoc_insertion_point(field_get:grpcDemo.GetServerStreamingMessageResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServerStreamingMessageResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcDemo.GetServerStreamingMessageResponse.message)
}
inline std::string* GetServerStreamingMessageResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:grpcDemo.GetServerStreamingMessageResponse.message)
  return _s;
}
inline const std::string& GetServerStreamingMessageResponse::_internal_message() const {
  return message_.Get();
}
inline void GetServerStreamingMessageResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetServerStreamingMessageResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetServerStreamingMessageResponse::release_message() {
  // @@protoc_insertion_point(field_release:grpcDemo.GetServerStreamingMessageResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetServerStreamingMessageResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcDemo.GetServerStreamingMessageResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcDemo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serverStreamingDemo_2eproto
THIRD_PARTY_INCLUDES_END
