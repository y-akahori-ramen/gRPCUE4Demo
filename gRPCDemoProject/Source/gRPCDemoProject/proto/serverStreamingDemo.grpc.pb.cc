THIRD_PARTY_INCLUDES_START
#pragma warning (disable : 4005)
#pragma warning (disable : 4125)
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: serverStreamingDemo.proto

#include "serverStreamingDemo.pb.h"
#include "serverStreamingDemo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcDemo {

static const char* ServerStreamingDemoService_method_names[] = {
  "/grpcDemo.ServerStreamingDemoService/GetTexture",
  "/grpcDemo.ServerStreamingDemoService/GetMessage",
};

std::unique_ptr< ServerStreamingDemoService::Stub> ServerStreamingDemoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerStreamingDemoService::Stub> stub(new ServerStreamingDemoService::Stub(channel, options));
  return stub;
}

ServerStreamingDemoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTexture_(ServerStreamingDemoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMessage_(ServerStreamingDemoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::grpcDemo::GetServerStreamingTextureResponse>* ServerStreamingDemoService::Stub::GetTextureRaw(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingTextureRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::grpcDemo::GetServerStreamingTextureResponse>::Create(channel_.get(), rpcmethod_GetTexture_, context, request);
}

void ServerStreamingDemoService::Stub::async::GetTexture(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingTextureRequest* request, ::grpc::ClientReadReactor< ::grpcDemo::GetServerStreamingTextureResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::grpcDemo::GetServerStreamingTextureResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTexture_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::grpcDemo::GetServerStreamingTextureResponse>* ServerStreamingDemoService::Stub::AsyncGetTextureRaw(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingTextureRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpcDemo::GetServerStreamingTextureResponse>::Create(channel_.get(), cq, rpcmethod_GetTexture_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::grpcDemo::GetServerStreamingTextureResponse>* ServerStreamingDemoService::Stub::PrepareAsyncGetTextureRaw(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingTextureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpcDemo::GetServerStreamingTextureResponse>::Create(channel_.get(), cq, rpcmethod_GetTexture_, context, request, false, nullptr);
}

::grpc::ClientReader< ::grpcDemo::GetServerStreamingMessageResponse>* ServerStreamingDemoService::Stub::GetMessageRaw(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingMessageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::grpcDemo::GetServerStreamingMessageResponse>::Create(channel_.get(), rpcmethod_GetMessage_, context, request);
}

void ServerStreamingDemoService::Stub::async::GetMessage(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingMessageRequest* request, ::grpc::ClientReadReactor< ::grpcDemo::GetServerStreamingMessageResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::grpcDemo::GetServerStreamingMessageResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::grpcDemo::GetServerStreamingMessageResponse>* ServerStreamingDemoService::Stub::AsyncGetMessageRaw(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpcDemo::GetServerStreamingMessageResponse>::Create(channel_.get(), cq, rpcmethod_GetMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::grpcDemo::GetServerStreamingMessageResponse>* ServerStreamingDemoService::Stub::PrepareAsyncGetMessageRaw(::grpc::ClientContext* context, const ::grpcDemo::GetServerStreamingMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpcDemo::GetServerStreamingMessageResponse>::Create(channel_.get(), cq, rpcmethod_GetMessage_, context, request, false, nullptr);
}

ServerStreamingDemoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerStreamingDemoService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ServerStreamingDemoService::Service, ::grpcDemo::GetServerStreamingTextureRequest, ::grpcDemo::GetServerStreamingTextureResponse>(
          [](ServerStreamingDemoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcDemo::GetServerStreamingTextureRequest* req,
             ::grpc::ServerWriter<::grpcDemo::GetServerStreamingTextureResponse>* writer) {
               return service->GetTexture(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerStreamingDemoService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ServerStreamingDemoService::Service, ::grpcDemo::GetServerStreamingMessageRequest, ::grpcDemo::GetServerStreamingMessageResponse>(
          [](ServerStreamingDemoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcDemo::GetServerStreamingMessageRequest* req,
             ::grpc::ServerWriter<::grpcDemo::GetServerStreamingMessageResponse>* writer) {
               return service->GetMessage(ctx, req, writer);
             }, this)));
}

ServerStreamingDemoService::Service::~Service() {
}

::grpc::Status ServerStreamingDemoService::Service::GetTexture(::grpc::ServerContext* context, const ::grpcDemo::GetServerStreamingTextureRequest* request, ::grpc::ServerWriter< ::grpcDemo::GetServerStreamingTextureResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerStreamingDemoService::Service::GetMessage(::grpc::ServerContext* context, const ::grpcDemo::GetServerStreamingMessageRequest* request, ::grpc::ServerWriter< ::grpcDemo::GetServerStreamingMessageResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcDemo

THIRD_PARTY_INCLUDES_END
