THIRD_PARTY_INCLUDES_START
#pragma warning (disable : 4005)
#pragma warning (disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientStreamingDemo.proto

#include "clientStreamingDemo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcDemo {
constexpr UploadClientTextureRequest::UploadClientTextureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct UploadClientTextureRequestDefaultTypeInternal {
  constexpr UploadClientTextureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadClientTextureRequestDefaultTypeInternal() {}
  union {
    UploadClientTextureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadClientTextureRequestDefaultTypeInternal _UploadClientTextureRequest_default_instance_;
constexpr UploadClientTextureResponse::UploadClientTextureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(0u){}
struct UploadClientTextureResponseDefaultTypeInternal {
  constexpr UploadClientTextureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadClientTextureResponseDefaultTypeInternal() {}
  union {
    UploadClientTextureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadClientTextureResponseDefaultTypeInternal _UploadClientTextureResponse_default_instance_;
}  // namespace grpcDemo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_clientStreamingDemo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_clientStreamingDemo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_clientStreamingDemo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_clientStreamingDemo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcDemo::UploadClientTextureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpcDemo::UploadClientTextureRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpcDemo::UploadClientTextureRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcDemo::UploadClientTextureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcDemo::UploadClientTextureResponse, size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcDemo::UploadClientTextureRequest)},
  { 8, -1, sizeof(::grpcDemo::UploadClientTextureResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcDemo::_UploadClientTextureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcDemo::_UploadClientTextureResponse_default_instance_),
};

const char descriptor_table_protodef_clientStreamingDemo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031clientStreamingDemo.proto\022\010grpcDemo\"J\n"
  "\032UploadClientTextureRequest\022\023\n\timageName"
  "\030\001 \001(\tH\000\022\017\n\005chunk\030\002 \001(\014H\000B\006\n\004data\"+\n\033Upl"
  "oadClientTextureResponse\022\014\n\004size\030\001 \001(\r2\177"
  "\n\033ClinentStreamingDemoService\022`\n\rUploadT"
  "exture\022$.grpcDemo.UploadClientTextureReq"
  "uest\032%.grpcDemo.UploadClientTextureRespo"
  "nse\"\000(\001B.Z,github.com/y-akahori-ramen/gR"
  "PCUE4Demo/protob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_clientStreamingDemo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clientStreamingDemo_2eproto = {
  false, false, 343, descriptor_table_protodef_clientStreamingDemo_2eproto, "clientStreamingDemo.proto", 
  &descriptor_table_clientStreamingDemo_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_clientStreamingDemo_2eproto::offsets,
  file_level_metadata_clientStreamingDemo_2eproto, file_level_enum_descriptors_clientStreamingDemo_2eproto, file_level_service_descriptors_clientStreamingDemo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_clientStreamingDemo_2eproto_getter() {
  return &descriptor_table_clientStreamingDemo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_clientStreamingDemo_2eproto(&descriptor_table_clientStreamingDemo_2eproto);
namespace grpcDemo {

// ===================================================================

class UploadClientTextureRequest::_Internal {
 public:
};

UploadClientTextureRequest::UploadClientTextureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcDemo.UploadClientTextureRequest)
}
UploadClientTextureRequest::UploadClientTextureRequest(const UploadClientTextureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kImageName: {
      _internal_set_imagename(from._internal_imagename());
      break;
    }
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpcDemo.UploadClientTextureRequest)
}

inline void UploadClientTextureRequest::SharedCtor() {
clear_has_data();
}

UploadClientTextureRequest::~UploadClientTextureRequest() {
  // @@protoc_insertion_point(destructor:grpcDemo.UploadClientTextureRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadClientTextureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void UploadClientTextureRequest::ArenaDtor(void* object) {
  UploadClientTextureRequest* _this = reinterpret_cast< UploadClientTextureRequest* >(object);
  (void)_this;
}
void UploadClientTextureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadClientTextureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadClientTextureRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:grpcDemo.UploadClientTextureRequest)
  switch (data_case()) {
    case kImageName: {
      data_.imagename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kChunk: {
      data_.chunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void UploadClientTextureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcDemo.UploadClientTextureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadClientTextureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string imageName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpcDemo.UploadClientTextureRequest.imageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadClientTextureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcDemo.UploadClientTextureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imageName = 1;
  if (_internal_has_imagename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagename().data(), static_cast<int>(this->_internal_imagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcDemo.UploadClientTextureRequest.imageName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imagename(), target);
  }

  // bytes chunk = 2;
  if (_internal_has_chunk()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcDemo.UploadClientTextureRequest)
  return target;
}

size_t UploadClientTextureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcDemo.UploadClientTextureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // string imageName = 1;
    case kImageName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imagename());
      break;
    }
    // bytes chunk = 2;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadClientTextureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadClientTextureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadClientTextureRequest::GetClassData() const { return &_class_data_; }

void UploadClientTextureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadClientTextureRequest *>(to)->MergeFrom(
      static_cast<const UploadClientTextureRequest &>(from));
}


void UploadClientTextureRequest::MergeFrom(const UploadClientTextureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcDemo.UploadClientTextureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kImageName: {
      _internal_set_imagename(from._internal_imagename());
      break;
    }
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadClientTextureRequest::CopyFrom(const UploadClientTextureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcDemo.UploadClientTextureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadClientTextureRequest::IsInitialized() const {
  return true;
}

void UploadClientTextureRequest::InternalSwap(UploadClientTextureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadClientTextureRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_clientStreamingDemo_2eproto_getter, &descriptor_table_clientStreamingDemo_2eproto_once,
      file_level_metadata_clientStreamingDemo_2eproto[0]);
}

// ===================================================================

class UploadClientTextureResponse::_Internal {
 public:
};

UploadClientTextureResponse::UploadClientTextureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcDemo.UploadClientTextureResponse)
}
UploadClientTextureResponse::UploadClientTextureResponse(const UploadClientTextureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:grpcDemo.UploadClientTextureResponse)
}

inline void UploadClientTextureResponse::SharedCtor() {
size_ = 0u;
}

UploadClientTextureResponse::~UploadClientTextureResponse() {
  // @@protoc_insertion_point(destructor:grpcDemo.UploadClientTextureResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadClientTextureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadClientTextureResponse::ArenaDtor(void* object) {
  UploadClientTextureResponse* _this = reinterpret_cast< UploadClientTextureResponse* >(object);
  (void)_this;
}
void UploadClientTextureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadClientTextureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadClientTextureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcDemo.UploadClientTextureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadClientTextureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadClientTextureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcDemo.UploadClientTextureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcDemo.UploadClientTextureResponse)
  return target;
}

size_t UploadClientTextureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcDemo.UploadClientTextureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadClientTextureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadClientTextureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadClientTextureResponse::GetClassData() const { return &_class_data_; }

void UploadClientTextureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadClientTextureResponse *>(to)->MergeFrom(
      static_cast<const UploadClientTextureResponse &>(from));
}


void UploadClientTextureResponse::MergeFrom(const UploadClientTextureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcDemo.UploadClientTextureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadClientTextureResponse::CopyFrom(const UploadClientTextureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcDemo.UploadClientTextureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadClientTextureResponse::IsInitialized() const {
  return true;
}

void UploadClientTextureResponse::InternalSwap(UploadClientTextureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadClientTextureResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_clientStreamingDemo_2eproto_getter, &descriptor_table_clientStreamingDemo_2eproto_once,
      file_level_metadata_clientStreamingDemo_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcDemo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcDemo::UploadClientTextureRequest* Arena::CreateMaybeMessage< ::grpcDemo::UploadClientTextureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcDemo::UploadClientTextureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcDemo::UploadClientTextureResponse* Arena::CreateMaybeMessage< ::grpcDemo::UploadClientTextureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcDemo::UploadClientTextureResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
THIRD_PARTY_INCLUDES_END
