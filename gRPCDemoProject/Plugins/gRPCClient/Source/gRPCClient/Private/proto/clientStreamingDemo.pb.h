THIRD_PARTY_INCLUDES_START
#pragma warning (disable : 4005)
#pragma warning (disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientStreamingDemo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clientStreamingDemo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clientStreamingDemo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clientStreamingDemo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clientStreamingDemo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clientStreamingDemo_2eproto;
namespace grpcDemo {
class UploadClientTextureRequest;
struct UploadClientTextureRequestDefaultTypeInternal;
extern UploadClientTextureRequestDefaultTypeInternal _UploadClientTextureRequest_default_instance_;
class UploadClientTextureResponse;
struct UploadClientTextureResponseDefaultTypeInternal;
extern UploadClientTextureResponseDefaultTypeInternal _UploadClientTextureResponse_default_instance_;
}  // namespace grpcDemo
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcDemo::UploadClientTextureRequest* Arena::CreateMaybeMessage<::grpcDemo::UploadClientTextureRequest>(Arena*);
template<> ::grpcDemo::UploadClientTextureResponse* Arena::CreateMaybeMessage<::grpcDemo::UploadClientTextureResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcDemo {

// ===================================================================

class UploadClientTextureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcDemo.UploadClientTextureRequest) */ {
 public:
  inline UploadClientTextureRequest() : UploadClientTextureRequest(nullptr) {}
  ~UploadClientTextureRequest() override;
  explicit constexpr UploadClientTextureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadClientTextureRequest(const UploadClientTextureRequest& from);
  UploadClientTextureRequest(UploadClientTextureRequest&& from) noexcept
    : UploadClientTextureRequest() {
    *this = ::std::move(from);
  }

  inline UploadClientTextureRequest& operator=(const UploadClientTextureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadClientTextureRequest& operator=(UploadClientTextureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadClientTextureRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kImageName = 1,
    kChunk = 2,
    DATA_NOT_SET = 0,
  };

  static inline const UploadClientTextureRequest* internal_default_instance() {
    return reinterpret_cast<const UploadClientTextureRequest*>(
               &_UploadClientTextureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadClientTextureRequest& a, UploadClientTextureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadClientTextureRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadClientTextureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadClientTextureRequest* New() const final {
    return new UploadClientTextureRequest();
  }

  UploadClientTextureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadClientTextureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadClientTextureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadClientTextureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadClientTextureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcDemo.UploadClientTextureRequest";
  }
  protected:
  explicit UploadClientTextureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageNameFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // string imageName = 1;
  bool has_imagename() const;
  private:
  bool _internal_has_imagename() const;
  public:
  void clear_imagename();
  const std::string& imagename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagename();
  PROTOBUF_MUST_USE_RESULT std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // bytes chunk = 2;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const std::string& chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk();
  PROTOBUF_MUST_USE_RESULT std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:grpcDemo.UploadClientTextureRequest)
 private:
  class _Internal;
  void set_has_imagename();
  void set_has_chunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_clientStreamingDemo_2eproto;
};
// -------------------------------------------------------------------

class UploadClientTextureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcDemo.UploadClientTextureResponse) */ {
 public:
  inline UploadClientTextureResponse() : UploadClientTextureResponse(nullptr) {}
  ~UploadClientTextureResponse() override;
  explicit constexpr UploadClientTextureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadClientTextureResponse(const UploadClientTextureResponse& from);
  UploadClientTextureResponse(UploadClientTextureResponse&& from) noexcept
    : UploadClientTextureResponse() {
    *this = ::std::move(from);
  }

  inline UploadClientTextureResponse& operator=(const UploadClientTextureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadClientTextureResponse& operator=(UploadClientTextureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadClientTextureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadClientTextureResponse* internal_default_instance() {
    return reinterpret_cast<const UploadClientTextureResponse*>(
               &_UploadClientTextureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadClientTextureResponse& a, UploadClientTextureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadClientTextureResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadClientTextureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadClientTextureResponse* New() const final {
    return new UploadClientTextureResponse();
  }

  UploadClientTextureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadClientTextureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadClientTextureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadClientTextureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadClientTextureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcDemo.UploadClientTextureResponse";
  }
  protected:
  explicit UploadClientTextureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcDemo.UploadClientTextureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clientStreamingDemo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadClientTextureRequest

// string imageName = 1;
inline bool UploadClientTextureRequest::_internal_has_imagename() const {
  return data_case() == kImageName;
}
inline bool UploadClientTextureRequest::has_imagename() const {
  return _internal_has_imagename();
}
inline void UploadClientTextureRequest::set_has_imagename() {
  _oneof_case_[0] = kImageName;
}
inline void UploadClientTextureRequest::clear_imagename() {
  if (_internal_has_imagename()) {
    data_.imagename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& UploadClientTextureRequest::imagename() const {
  // @@protoc_insertion_point(field_get:grpcDemo.UploadClientTextureRequest.imageName)
  return _internal_imagename();
}
template <typename ArgT0, typename... ArgT>
inline void UploadClientTextureRequest::set_imagename(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_imagename()) {
    clear_data();
    set_has_imagename();
    data_.imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.imagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcDemo.UploadClientTextureRequest.imageName)
}
inline std::string* UploadClientTextureRequest::mutable_imagename() {
  std::string* _s = _internal_mutable_imagename();
  // @@protoc_insertion_point(field_mutable:grpcDemo.UploadClientTextureRequest.imageName)
  return _s;
}
inline const std::string& UploadClientTextureRequest::_internal_imagename() const {
  if (_internal_has_imagename()) {
    return data_.imagename_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UploadClientTextureRequest::_internal_set_imagename(const std::string& value) {
  if (!_internal_has_imagename()) {
    clear_data();
    set_has_imagename();
    data_.imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.imagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadClientTextureRequest::_internal_mutable_imagename() {
  if (!_internal_has_imagename()) {
    clear_data();
    set_has_imagename();
    data_.imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.imagename_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadClientTextureRequest::release_imagename() {
  // @@protoc_insertion_point(field_release:grpcDemo.UploadClientTextureRequest.imageName)
  if (_internal_has_imagename()) {
    clear_has_data();
    return data_.imagename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void UploadClientTextureRequest::set_allocated_imagename(std::string* imagename) {
  if (has_data()) {
    clear_data();
  }
  if (imagename != nullptr) {
    set_has_imagename();
    data_.imagename_.UnsafeSetDefault(imagename);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(imagename);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:grpcDemo.UploadClientTextureRequest.imageName)
}

// bytes chunk = 2;
inline bool UploadClientTextureRequest::_internal_has_chunk() const {
  return data_case() == kChunk;
}
inline bool UploadClientTextureRequest::has_chunk() const {
  return _internal_has_chunk();
}
inline void UploadClientTextureRequest::set_has_chunk() {
  _oneof_case_[0] = kChunk;
}
inline void UploadClientTextureRequest::clear_chunk() {
  if (_internal_has_chunk()) {
    data_.chunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& UploadClientTextureRequest::chunk() const {
  // @@protoc_insertion_point(field_get:grpcDemo.UploadClientTextureRequest.chunk)
  return _internal_chunk();
}
template <typename ArgT0, typename... ArgT>
inline void UploadClientTextureRequest::set_chunk(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_chunk()) {
    clear_data();
    set_has_chunk();
    data_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.chunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcDemo.UploadClientTextureRequest.chunk)
}
inline std::string* UploadClientTextureRequest::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:grpcDemo.UploadClientTextureRequest.chunk)
  return _s;
}
inline const std::string& UploadClientTextureRequest::_internal_chunk() const {
  if (_internal_has_chunk()) {
    return data_.chunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UploadClientTextureRequest::_internal_set_chunk(const std::string& value) {
  if (!_internal_has_chunk()) {
    clear_data();
    set_has_chunk();
    data_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadClientTextureRequest::_internal_mutable_chunk() {
  if (!_internal_has_chunk()) {
    clear_data();
    set_has_chunk();
    data_.chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.chunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadClientTextureRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:grpcDemo.UploadClientTextureRequest.chunk)
  if (_internal_has_chunk()) {
    clear_has_data();
    return data_.chunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void UploadClientTextureRequest::set_allocated_chunk(std::string* chunk) {
  if (has_data()) {
    clear_data();
  }
  if (chunk != nullptr) {
    set_has_chunk();
    data_.chunk_.UnsafeSetDefault(chunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(chunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:grpcDemo.UploadClientTextureRequest.chunk)
}

inline bool UploadClientTextureRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void UploadClientTextureRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline UploadClientTextureRequest::DataCase UploadClientTextureRequest::data_case() const {
  return UploadClientTextureRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UploadClientTextureResponse

// uint32 size = 1;
inline void UploadClientTextureResponse::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadClientTextureResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadClientTextureResponse::size() const {
  // @@protoc_insertion_point(field_get:grpcDemo.UploadClientTextureResponse.size)
  return _internal_size();
}
inline void UploadClientTextureResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void UploadClientTextureResponse::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:grpcDemo.UploadClientTextureResponse.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcDemo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clientStreamingDemo_2eproto
THIRD_PARTY_INCLUDES_END
